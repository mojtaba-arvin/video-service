syntax = "proto3";

service Streaming{
  rpc video_processor(JobRequest) returns (JobResponse) {}
  rpc get_result(ResultRequest) returns (ResultResponse) {}
}

message JobRequest {

  // to call client when the task is finished
  string webhook_url = 1;
  string reference_id = 2;

  // the target video on s3 to convert
  S3Input s3_input = 3;

  // every output includes destination s3 key, and convert details
  repeated StreamingOutput outputs = 5;
}
enum Protocol {
  HLS = 0;
  DASH = 1;
}
message StreamingOutput{
  Protocol protocol = 1;
  S3Output s3 = 2;
  ConvertOptions options = 3;
}
message S3Input{
  string key = 1;
  string bucket = 2;
}
message S3Output{
  string key = 1;
  string bucket = 2;
  bool create_bucket = 3;
  bool dont_replace = 4;
}
message H264{
  enum VideoCodec {
    LIBX264 = 0;
    H264 = 1;
    H264_AFM = 2;
    H264_NVENC = 3;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2; // libfaac is not supported anymore. Instead use libvo_aacenc
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 1;
  AudioCodec audio_codec = 2;
}
message Hevc{
  enum VideoCodec {
    LIBX265 = 0;
    H265 = 1;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2;
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 3;
  AudioCodec audio_codec = 4;
}
message Vp9{
  enum VideoCodec {
    LIBVPX_VP9 = 0;
    H265 = 1;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2;
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 3;
  AudioCodec audio_codec = 4;
}
enum QualityName {
  R_144P = 0;
  R_240P = 1;
  R_360P = 2;
  R_480P = 3;
  R_720P = 4;
  R_1080P = 5;
  R_2K = 6;
  R_4K = 7;
}
message QualitySize{
  int32 width = 1;  // 256
  int32 height = 2;  // 144
}
message QualityBitrate{
  int32 video = 1;  // 95 * 1024
  int32 audio = 2;  // 64 * 1024
  int32 overall = 3;
}
message CustomQuality{
    QualitySize size = 1;
    QualityBitrate bitrate = 2;
}
message ConvertOptions{
  // HLS segments can be fmp4 or ts
  bool fmp4 = 1;

  oneof encode_format {
     H264 h264 = 2;
     Hevc hevc = 3;
     Vp9 vp9 = 4;
  }
  repeated QualityName quality_names = 5;
  repeated CustomQuality custom_qualities = 6;
}
message JobResponse {
  string tracking_id = 1;
}


message ResultRequest {
  repeated string tracking_id = 1;
}
message ResultResponse {
  repeated ResultDetails result = 1;
}
enum PrimaryStatus {
    QUEUING_CHECKS = 0;
    CHECKING = 1;
    CHECKS_FINISHED = 2;

    QUEUING_INPUTS_DOWNLOADING = 3;
    INPUTS_DOWNLOADING = 4;
    ALL_INPUTS_DOWNLOADED = 5;

    QUEUING_OUTPUTS = 6;
    OUTPUTS_PROGRESSING= 7;
    ALL_OUTPUTS_ARE_READY = 8;
}
message ResultDetails {
  string request_id = 1;
  string reference_id = 2;
  PrimaryStatus status = 3;
  int32 total_outputs = 4;
  int32 ready_outputs = 5;
  Checks checks = 6;
  repeated InputProgress inputs = 7;
  repeated OutputProgress outputs = 8;
}
message Checks {
    int64 total = 3;
    int64 passed = 4;
}
enum OutputStep {
    PREPARATION_PROCESSING = 0;
    PROCESSING = 1;
    PROCESSING_FINISHED = 2;
    QUEUING_UPLOADING = 3;
    PLAYLIST_UPLOADING = 4;
    UPLOADING_FINISHED = 5;
}
message OutputProgress {
    int32 id = 1;
    OutputStep step = 2;
    int64 total = 3;
    int64 current = 4;
}
enum InputStep {
    PREPARATION_DOWNLOADS = 0;
    DOWNLOADING = 1;
    DOWNLOADING_FINISHED = 2;
}
message InputProgress {
    int32 id = 1;
    InputStep step = 2;
    int64 total = 3;
    int64 current = 4;
}
