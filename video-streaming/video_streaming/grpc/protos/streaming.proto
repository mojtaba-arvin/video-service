syntax = "proto3";

service Streaming{
  rpc create_job(JobRequest) returns (JobResponse) {}
  rpc get_results(JobsResultsRequest) returns (JobsResultsResponse) {}
  rpc revoke_jobs(RevokeJobsRequest) returns (RevokeJobsResponse) {}
  rpc revoke_job_outputs(RevokeOutputsRequest) returns (RevokeOutputsResponse) {}
}

message JobRequest {

  // to call client when the task is finished
  string webhook_url = 1;
  string reference_id = 2;

  // the target video on s3 to convert
  S3Input s3_input = 3;

  // every output includes destination s3 key, and convert details
  repeated StreamingOutput outputs = 5;
}
enum Protocol {
  HLS = 0;
  DASH = 1;
}
message StreamingOutput{
  Protocol protocol = 1;
  S3Output s3 = 2;
  ConvertOptions options = 3;
}
message S3Input{
  string key = 1;
  string bucket = 2;
}
message S3Output{
  string key = 1;
  string bucket = 2;
  bool create_bucket = 3;
  bool dont_replace = 4;
}
message H264{
  enum VideoCodec {
    LIBX264 = 0;
    H264 = 1;
    H264_AFM = 2;
    H264_NVENC = 3;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2; // libfaac is not supported anymore. Instead use libvo_aacenc
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 1;
  AudioCodec audio_codec = 2;
}
message Hevc{
  enum VideoCodec {
    LIBX265 = 0;
    H265 = 1;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2;
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 3;
  AudioCodec audio_codec = 4;
}
message Vp9{
  enum VideoCodec {
    LIBVPX_VP9 = 0;
    H265 = 1;
  }
  enum AudioCodec {
    AAC = 0;
    COPY = 1;
    LIBVO_AACENC = 2;
    LIBMP3LAME = 3;
    LIBFDK_AAC = 4;
  }
  VideoCodec video_codec = 3;
  AudioCodec audio_codec = 4;
}
enum QualityName {
  R_144P = 0;
  R_240P = 1;
  R_360P = 2;
  R_480P = 3;
  R_720P = 4;
  R_1080P = 5;
  R_2K = 6;
  R_4K = 7;
}
message QualitySize{
  int32 width = 1;  // 256
  int32 height = 2;  // 144
}
message QualityBitrate{
  int32 video = 1;  // 95 * 1024
  int32 audio = 2;  // 64 * 1024
  int32 overall = 3;
}
message CustomQuality{
    QualitySize size = 1;
    QualityBitrate bitrate = 2;
}
message ConvertOptions{
  // HLS segments can be fmp4 or ts
  bool fmp4 = 1;

  oneof encode_format {
     H264 h264 = 2;
     Hevc hevc = 3;
     Vp9 vp9 = 4;
  }
  repeated QualityName quality_names = 5;
  repeated CustomQuality custom_qualities = 6;
}
message JobResponse {
  string tracking_id = 1;
}


message JobsResultsRequest {
  repeated string tracking_ids = 1;
}
message JobsResultsResponse {
  repeated ResultDetails results = 1;
}
enum PrimaryStatus {

  QUEUING_CHECKS = 0;
  CHECKING = 1;
  CHECKS_FINISHED = 2;

  QUEUING_INPUTS_DOWNLOADING = 3;
  INPUTS_DOWNLOADING = 4;
  ALL_INPUTS_DOWNLOADED = 5;

  QUEUING_OUTPUTS = 6;
  OUTPUTS_PROGRESSING = 7;
  FINISHED = 8;

  REVOKED = 9;
  FAILED = 10;

}
enum StopReason{
  NO_REASON = 0;

  FORCE_REVOKED = 1;
  INTERNAL_ERROR = 2;

  INPUT_VIDEO_ON_S3_IS_404_OR_403 = 3;

  FAILED_INPUT_KEY_CHECKING = 4;

  FAILED_OUTPUT_BUCKET_CHECKING = 5;
  OUTPUT_BUCKET_ON_S3_IS_404_OR_403 = 6;

  FAILED_OUTPUT_KEY_CHECKING = 7;
  OUTPUT_KEY_IS_ALREADY_EXIST = 8;

  DOWNLOADING_FAILED = 9;

  FAILED_ANALYZE_INPUT = 10;

  FAILED_CREATE_PLAYLIST = 11;
  INPUT_VIDEO_SIZE_CAN_NOT_BE_ZERO = 12;
  REPRESENTATION_NEEDS_BOTH_SIZE_AND_BITRATE = 13;

  FAILED_UPLOAD_DIRECTORY = 14;

}
message ResultDetails {
  string tracking_id = 1;
  string reference_id = 2;
  PrimaryStatus status = 3;
  StopReason reason = 4;
  int32 total_outputs = 5;
  int32 revoked_outputs = 6; // when job force stopped, is equal to total_outputs
  int32 ready_outputs = 7; // number of outputs that successfully finished
  int32 failed_outputs = 8; // number of outputs that failed
  Checks checks = 9;
  repeated InputProgress inputs = 10;
  repeated OutputProgress outputs = 11;
  OriginalFileInfo file_info = 12;
}
message GeneralInfo{
    float duration = 1; // 68.843000
    int64 file_size = 2;
    int64 bit_rate = 3;
    // ffprobe gives a list of formats inside the format_name value
    string file_formats = 4; // 'mov,mp4,m4a,3gp,3g2,mj2'

}
message VideoInfo{
    string codec = 1;
    int64 width = 2;
    int64 height = 3;
    string frame_rate = 4;  // '30/1'
    int64 bit_rate = 5;
}
message AudioInfo{
    string codec = 1;
    int64 sample_rate = 2;
    int64 bit_rate = 3;
    string channel_layout = 4;  // 'stereo'
}
message OriginalFileInfo{
    GeneralInfo general = 1;
    VideoInfo video = 2;
    AudioInfo audio = 3;
}
message Checks {
    int64 total = 3;
    int64 passed = 4;
}
enum OutputStatus {
  PREPARATION_PROCESSING = 0;
  PROCESSING = 1;
  PROCESSING_FINISHED = 2;

  QUEUING_UPLOADING = 3;
  PLAYLIST_UPLOADING = 4;
  UPLOADING_FINISHED = 5;

  OUTPUT_REVOKED = 6;
  OUTPUT_FAILED = 7;
}
message OutputProgress {
    int32 id = 1;
    OutputStatus status = 2;
    int64 total = 3;
    int64 current = 4;
}
enum InputStatus {
    PREPARATION_DOWNLOAD = 0;
    DOWNLOADING = 1;
    DOWNLOADING_FINISHED = 2;

    QUEUING_TO_ANALYZE = 3;
    ANALYZING = 4;
    ANALYZING_FINISHED = 5;

    INPUT_REVOKED = 6;
    INPUT_FAILED = 7;
}
message InputProgress {
    int32 id = 1;
    InputStatus status = 2;
    int64 total = 3;
    int64 current = 4;
}

message RevokeJobsRequest {
  repeated string tracking_ids = 1;
}
message RevokeJobsResponse{
  repeated RevokeDetails results = 1;
}
enum RevokeSignalStatus {
  REQUEST_NOT_FOUND = 0;
  REVOKE_SIGNAL_SENT = 1;
}
message RevokeDetails{
    string tracking_id = 1;
    string reference_id = 2;
    RevokeSignalStatus has_been_sent = 3;
}


message RevokeOutputsRequest{
  string tracking_id = 1;
  repeated int32 output_numbers = 2;
}
message RevokeOutputsResponse{
    // returns gRPC error if tracking_id not found
    string tracking_id = 1;
    string reference_id = 2;
    repeated OutputsToRevoke outputs_to_revoke = 4;
}
message OutputsToRevoke{
  int32 output_number = 1;
  oneof signal_status {
     bool signal_has_been_sent = 2;
     signalFailedReason signal_failed_reason = 3;
  }
}
enum signalFailedReason{
  OUTPUT_NUMBER_IS_INVALID = 0; // when output number is not valid
  OUTPUT_HAS_BEEN_FAILED = 1; // when output status is OUTPUT_FAILED
  OUTPUT_HAS_BEEN_UPLOADED = 2; // when output status is UPLOADING_FINISHED
  OUTPUT_UPLOADING_COULD_NOT_BE_STOPPED = 3; // sometimes when output status is PLAYLIST_UPLOADING
}
